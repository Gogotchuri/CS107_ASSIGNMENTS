1)  a)ერთი და იგივე ანგარიშის ბალანსი, ერთდროულად ვერ შეიცვლება და ვერ წარმოდგება, როდესაც ნებისმიერი სახის ოპერაცია
        სრულდება კონრეტულ ანგარიშზე, ამ ანგარიშს სხვა ვერავის მისწვდბა, ამაში გამოვიყენე ანგარიშის სტრუქტურაში ჩაშენებული
        ორობითი სემაფორა(მუტექსი). გადარიცხვის რეპორტი მთლიანად გახდა ატომური ოპერაცია, რადგან ერთსა და იმავე ბანკის
        ცვლადებზე, ორი სხვადასხვა თრედიდან ერთად არ უნდა მივწვდეთ, ბანკის სტრუქტურაში ჩაშენებული 
        მუტექსი, transfer_rep_lock, სწორედ ამ მიზანს ემსახურება. დღის ბოლო რეპო.რტს, ის მუშა წერს, რომელიც ბოლოს
        ამთავრებს სამუშაოს და მხოლოდ რეპორტის დაწერის შემდეგ "იწყება ახალი დღე". სხვა მუშებისთვის დალოდება წარმოდგენილია
        ბანკის სტრუქტურაში ჩაწერილი მთვლელის სახით, რომელსაც ატომურად ამცირებს ყველად მუშა საქმის დამთავრებსას, რის შემდეგაც
        ელოდება starting_new სემაფორაზე, სანამ ბოლო მუშა არ მისცემს დასტურს დაიწყოს ახალი დღე. თუ ქაუნთერი 1ზე დავა, მუშა ხვდება,
        რომ ის ბოლოა, აბრუნებს ექაუნთერს საწყის მნიშვნელობაზე და ეუბნება ყველა მუშას, რომ დაიწყოს ახალი სამუშაო დღე(სემაფორაზე პოსთით).
        ეთსა და იმავე ანგარიშზე და განყოფილებაში, ატომურადაა შესაძლებელი თანხის შეტანა და ასევე გამოტანა. რაც შეეხება გადარიცხვებს,
        ერთსა და იმავე განყოფილების ნებისმიერი ორ-ორი განსხვავებული ექაუნთი კონკურენტულად ახერხებს თანხა გადარიცხოს, მხოლოდ საკუთარი
        თავის დაბლოკვით. რაც შეეხება განყოფილებებს შორის ანგარიშების გადარიცხვებს, ვინაიდან გვინდა სწორად შევინარჩუნოთ განყოფილებების
        ბალანსი. როდესაც ანგარიშდება მთლიანი ბანკის ბალანსი, იბლოკება თითოეული განყოფილება, რათა არ მოხდეს შეცდომა. და ასევე რეპორტების
        შედარებისას იბლოკება ორივე რეპორტი, რათა არავინ შეიტანოს მათში ცვლილება.
    b)იმისთვის, რომ ჩიხი ავირიდოთ და სისტემა არ დაგვებლოკოს, ანგარიშები, ფილიალების და რეპორტების დაბლოკვა ყოველთვის უნდა გავაკეთოთ ერთი
        მიმართულებით(ფილოსოფოესების ჩანგლებს ამოცანის მსგავსად). ასევე ჯერ ვბლოკავთ შედარებით მცირე სიმრავლის მუტექსს, რომელიც შედის დიდში.
        მაგალითად, ჯერ ვბლოკავთ ექაუნთს და შემდეგ ბრანჩს, სხვა შემთხვევაში, შეიძლება დავბლოკოთ ფილიალი და ამ დროს ანგარიშიც დაგვხვდეს დახურული,
        თრედი კი გაიყინება ამ ადგილას და მოხდება დედლოქი.
2)ვფიქრობ, კარგი იდეა იქნება, თითოეული ფილიალისთვის თუ გვექნება იმ ზომის მასივი, რამდენი კლიენტიც ყავს, და თითოეულისთვის შეინახოს ანგარიშზე
    მომხდარი ნებსმიერი ცვლილება ფილიალის დალოქვის გარეშე კონკურენტულად მოხდებოდა, რაც ბევრად დააჩქარებდა პროცესს.
3)  a)ორმა თრედმა მოითხოვა გამოტანა ერთდოულად, პირველმა შეამოწმა ბალანსი, გადაირთო მეორე თრედზე ამანახც შეამოწმა ბალანსი და გამოიტანა თანხა
        (დააკლო ბალანსი). ამ დროს პირველი ფიქრობს რომ საკმარისი თანხაა ანგარიშზე და ხსნის, თანხა უარყოფითში ვერ გადადის ნიშნის არქონის გამო 
        და უბრუნდება უდიდეს დადებით მნიშვნელობას და იქიდან ახორციელებს დაშვებული თანხის ამოკლდებას, სწორედ ამის გამო იყო ანგარიშზე დიდი თანხა.
    b)შედეგი ანალოგიური იქნება.
*)კარგი იქნება მემორი ლიქებისგანაც თუ გაიწმინდება, მაგრამ დავალების ნაწილი არ არის